// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parser happy path works 1`] = `
Array [
  Object {
    "code": "contains('foo', 'fooo'); // false",
    "name": undefined,
    "result": false,
    "type": "value",
  },
  Object {
    "code": "contains('hey', 'ey'); // true;",
    "name": undefined,
    "result": true,
    "type": "value",
  },
]
`;

exports[`Parser multiline examples 1`] = `
Array [
  Object {
    "code": "easy.utils.each([1, 2, 3], function (value, index) {
    easy.console.log(index, value);
});",
    "name": undefined,
    "result": "",
    "type": "default",
  },
  Object {
    "code": "easy.utils.each({foo: 'bar', baz: 'bar'}, function (value, key) {
    easy.console.log(key, value);
});",
    "name": undefined,
    "result": "",
    "type": "default",
  },
  Object {
    "code": "var utils = {
    power: function (base, exponent) {
        return Math.pow(base, exponent);
    }
};

easy.utils.each([1, 2, 3], function (value, index) {
    // \\"this\\" references the utils object where the function \\"power\\" is available
    easy.console.log(index, value, this.power(value));
}, utils);",
    "name": undefined,
    "result": "",
    "type": "default",
  },
  Object {
    "code": "easy.utils.each({foo: 'bar', baz: 'bar'}, function (value, key) {
    // \\"this\\" references the global object where the built-in String object is available
    easy.console.log(key, value, this.String.prototype.toUpperCase.call(value));
});",
    "name": undefined,
    "result": "",
    "type": "default",
  },
]
`;
