// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Creator async.js 1`] = `
"export function getFromURL(str) {
  return fetch(str);
}
export default { getFromURL };

// Valid tests: 100.00%

describe('getFromURL', () => {
  test('example 1', async () => {
    expect(
      await mock.async(
        () =>
          getFromURL('https://mail.google.com/mail/').then(response => response.slice(5).trim()),
        { \\"fetch('string')\\": 'hello world  ' },
        func => eval(func),
      ),
    ).toBe('world');
  });
});
"
`;

exports[`Creator empty 1`] = `
"// Valid tests: 0%
"
`;

exports[`Creator handles invalid examples 1`] = `
"export function mayContain(str1, str2) {
  return str1 && str1.indexOf(str2) !== -1;
}
export default { mayContain };

// Valid tests: 100.00%

describe('mayContain', () => {
  test('example 1', () => {
    expect(mayContain('foo', 'fooo')).not.toThrow(); // fixme: could be replaced with something more specific
  });
});
"
`;

exports[`Creator invalid syntax 1`] = `
"export function mayContain(str1, str2) {
  return true;
}
export default { mayContain };

// Valid tests: 0%

describe('undefined', () => {
  test('example 1', () => {
    throw new SyntaxError('Empty expect');
    /* expect().toBeOneInstanceOf([\\"Boolean\\"]); // fixme: could be replaced with something more specific */
  });
});
"
`;

exports[`Creator mocked-easy.js 1`] = `
"export function contains(str1, str2) {
  if (easy.utils.isString(str1)) {
    return str1 && str1.indexOf(str2) !== -1;
  }
  return false;
}
export default { contains };

// Valid tests: 100.00%

describe('contains', () => {
  test('example 1', () => {
    expect(
      mock(() => contains('foo', 'fooo'), { 'easy.utils.isString(1)': true }, func => eval(func)),
    ).toBe(false);
  });

  test('example 2', () => {
    expect(
      mock(() => contains('hey', 'ey'), { 'easy.utils.isString(1)': true }, func => eval(func)),
    ).toBe(true);
  });
});
"
`;

exports[`Creator prevents reference errors in toBe/toEqual 1`] = `
"export function contains(str1, str2) {
  return str1 && str1.indexOf(str2) !== -1 ? 'yes' : 'no';
}
export default { contains };

// Valid tests: 100.00%

describe('contains', () => {
  test('example 1', () => {
    expect(contains('foo', 'fooo')).not.toThrow(); // fixme: could be replaced with something more specific
  });

  test('example 2', () => {
    expect(contains('hey', 'ey')).not.toThrow(); // fixme: could be replaced with something more specific
  });
});
"
`;

exports[`Creator resolves async name 1`] = `
"export function _window(property, options) {
  options = easy.utils.extend(
    {
      retryInterval: 250,
      endTime: 5000,
    },
    options,
  );
  options.global = options.global || window;
  return new easy.Promise((resolve, reject) => {
    easy.utils
      .waitFor(options.retryInterval, options.endTime, () => {
        const result = site.utils.getValueByDotString(options.global, property);
        if (result !== undefined) {
          resolve(result);
          return true;
        }
        return undefined;
      })
      .catch((err) => {
        reject(err);
      });
  });
}
export default { _window };

// Valid tests: 100.00%

describe('window', () => {
  test('example 1', async () => {
    expect(
      await evaluate(
        () => {
          frosmo.site.utils.window('foo.bar').then((result) => {
            console.log(result);
          });
          const foo = { bar: 123 };
        },
        func => eval(func),
      ),
    ).toBe(123);
  });

  test('example 2', async () => {
    expect(
      await frosmo.site.utils.window('someUndefinedVariable').catch((err) => {
        console.log(err);
      }),
    ).toBe('timeout');
  });
});
"
`;

exports[`Creator writes to file 1`] = `
Array [
  "export function contains(str1, str2) {
  return str1 && str1.indexOf(str2) !== -1;
}
export default { contains };
",
  "// Valid tests: 100.00%
import __imports__, { contains } from './trash-arbb88scjoshu.exports.js';

global.__imports__ = __imports__;
Object.assign(global, __imports__);

describe('contains', () => {
  test('example 1', () => {
    expect(contains('foo', 'fooo')).toBe(false);
  });

  test('example 2', () => {
    expect(contains('hey', 'ey')).toBe(true);
  });
});
",
]
`;

exports[`Creator writes to stdout #2 1`] = `
"export function mayContain(str1, str2) {
  return str1 && str1.indexOf(str2) !== -1;
}
export default { mayContain };

// Valid tests: 100.00%

describe('mayContain', () => {
  test('example 1', () => {
    expect(mayContain('foo', 'fooo')).toBeOneInstanceOf(['Boolean']); // fixme: could be replaced with something more specific
  });
});
"
`;

exports[`Creator writes to stdout #3 1`] = `
"export function each(obj, iterator, context) {
  _forEach(obj, iterator, context);
}
export default { each };

// Valid tests: 100.00%

describe('each', () => {
  test('example 1', () => {
    expect(
      easy.utils.each([1, 2, 3], (value, index) => {
        easy.console.log(index, value);
      }),
    ).not.toThrow(); // fixme: could be replaced with something more specific
  });

  test('example 2', () => {
    expect(
      easy.utils.each(
        {
          foo: 'bar',
          baz: 'bar',
        },
        (value, key) => {
          easy.console.log(key, value);
        },
      ),
    ).not.toThrow(); // fixme: could be replaced with something more specific
  });

  test('example 3', () => {
    expect(
      evaluate(
        () => {
          const utils = {
            power(base, exponent) {
              return Math.pow(base, exponent);
            },
          };
          easy.utils.each(
            [1, 2, 3],
            function (value, index) {
              easy.console.log(index, value, this.power(value));
            },
            utils,
          );
        },
        func => eval(func),
      ),
    ).not.toThrow(); // fixme: could be replaced with something more specific
  });

  test('example 4', () => {
    expect(
      easy.utils.each(
        {
          foo: 'bar',
          baz: 'bar',
        },
        function (value, key) {
          easy.console.log(key, value, this.String.prototype.toUpperCase.call(value));
        },
      ),
    ).not.toThrow(); // fixme: could be replaced with something more specific
  });
});
"
`;

exports[`Creator writes to stdout 1`] = `
"export function contains(str1, str2) {
  return str1 && str1.indexOf(str2) !== -1;
}
export default { contains };

// Valid tests: 100.00%

describe('contains', () => {
  test('example 1', () => {
    expect(contains('foo', 'fooo')).toBe(false);
  });

  test('example 2', () => {
    expect(contains('hey', 'ey')).toBe(true);
  });
});
"
`;
